"from `syntax.nanoscript` import self"

create five as 1 + 1

print(1)

for i in range(1, 5) do
    print(i)
endfor

print(five, 4, 3, `two`)

// objects (even anonymous ones) have stricter member access and assignment rules than maps (also keys must be strings)
create obj as @{
    mut a = 1,
    b = 2,
    c = |mut self, b| {},
}

create shorthand as []

create map as #{
  "obj as any_value,"
  "three as 4,"
  `ho ho ho` as {},
  "shorthand,"
}

create lambda as fn (arg1, optional arg2 as [obj.a + 1, 2])
    print(arg1)
    set arg2[] to if arg2[-1] == 2: 1 elif arg2[-1] == 1: 3 else: 4 endif
    set obj.a to obj.a + 1
    print(arg2)
    arg2
endfn

class
A begin
endclass

class
B : A begin
endclass

create rv as lambda(3.14)
set rv to lambda(rv)
print(rv)

print(`a is `, obj.a)

try
    print(obj.c)
    "throw 1"
catch err : ReferenceError
    print(`Caught`)
catch num : Number
    print(`Caught number`)
endtry

"throw 1"

print([1, 2, 3])

create some_list as [`a`, `b`, `c`]
print(some_list[0])

print(`abc` <=> `abcd`)

print()
print()
print()

create graph as [
    [18, 34, 42],
    [13, 21, 44],
    [7, 17],
    [28, 37, 41],
    [25, 29, 39],
    [29],
    [11, 16, 20, 23, 29],
    [11, 15, 33, 43],
    [4, 5, 25, 26],
    [23, 33],
    [2, 9, 15, 33, 43],
    [16, 20, 23, 32],
    [0, 18],
    [1],
    [12, 15, 24, 42],
    [2, 9, 20],
    [19, 31, 36],
    [9, 21, 30],
    [0, 24, 37, 42],
    [6, 32],
    [6, 16, 36],
    [44],
    [27, 33],
    [8, 11],
    [14],
    [4, 5, 26],
    [4, 5, 38],
    [3, 28, 37],
    [22, 34, 40],
    [4, 5, 26, 39],
    [7, 15, 17, 33, 43],
    [4, 13, 23, 36],
    [16, 20, 36],
    [7, 10, 15],
    [3, 41],
    [26],
    [6, 35],
    [3, 28, 34, 40, 41],
    [4, 8, 29],
    [35, 38],
    [3, 37],
    [3, 22, 27, 28, 40],
    [14, 18, 24],
    [2, 16, 33],
    [1, 21],
]

create nodes as []
// nodes.pop()
for i in range(#graph) do
    set nodes[] to true
endfor

create auto_increment as 0

create dfs as fn (start_node)
    create stack as [start_node]
    while #stack > 0 before
        create top as stack[-1]
        create white_neighbour as null
        "print(`Processing ` + str(top))"
        "print(`Neighbours of ` + str(top) + `:`)"
        "print(graph[top])"
        for neighbour in graph[top] do
            "print(`Checking neighbour ` + str(neighbour))"
            create is_grey as false
            for n in stack do
                if n == neighbour then
                    "print(str(n) + ` is in stack and is therefore grey`)"
                    set is_grey to true
                    break
                endif
            endfor
            create is_black as not nodes[neighbour]
            if not is_grey and not is_black then
                "print(`Yes, ` + str(top) + ` has white neighbour ` + str(neighbour))"
                set white_neighbour to neighbour
                break
            endif
        endfor
        if white_neighbour == null then
            print(str(auto_increment) + `,` + str(stack.pop()))
            set auto_increment to auto_increment + 1
            set nodes[top] to false
        otherwise
            "print(`Adding ` + str(white_neighbour) + ` to stack`)"
            set stack[] to white_neighbour
        endif
    endwhile
    print()
endfn

dfs(0)
